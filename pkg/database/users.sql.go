// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package database

import (
	"context"
	"time"
)

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = ?1
`

type DeleteUserParams struct {
	ID int64
}

func (q *Queries) DeleteUser(ctx context.Context, arg DeleteUserParams) error {
	_, err := q.db.ExecContext(ctx, deleteUser, arg.ID)
	return err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO users (
    created_at,
    updated_at,
    first_name,
    last_name,
    email_address,
    email_verified,
    password_hash
) VALUES (
    ?1,
    ?2,
    ?3,
    ?4,
    ?5,
    ?6,
    ?7
)
`

type InsertUserParams struct {
	CreatedAt     time.Time
	UpdatedAt     time.Time
	FirstName     string
	LastName      string
	EmailAddress  string
	EmailVerified bool
	PasswordHash  string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.ExecContext(ctx, insertUser,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.FirstName,
		arg.LastName,
		arg.EmailAddress,
		arg.EmailVerified,
		arg.PasswordHash,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
    updated_at = 'now',
    first_name = ?1,
    last_name = ?2,
    email_address = ?3,
    email_verified = ?4,
    password_hash = ?5
WHERE id = ?6
`

type UpdateUserParams struct {
	FirstName     string
	LastName      string
	EmailAddress  string
	EmailVerified bool
	PasswordHash  string
	ID            int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.FirstName,
		arg.LastName,
		arg.EmailAddress,
		arg.EmailVerified,
		arg.PasswordHash,
		arg.ID,
	)
	return err
}

const userByEmail = `-- name: UserByEmail :one
SELECT id, created_at, updated_at, first_name, last_name, email_address, email_verified, password_hash
FROM users
WHERE email_address = ?1
LIMIT 1
`

type UserByEmailParams struct {
	EmailAddress string
}

func (q *Queries) UserByEmail(ctx context.Context, arg UserByEmailParams) (*User, error) {
	row := q.db.QueryRowContext(ctx, userByEmail, arg.EmailAddress)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstName,
		&i.LastName,
		&i.EmailAddress,
		&i.EmailVerified,
		&i.PasswordHash,
	)
	return &i, err
}

const userByID = `-- name: UserByID :one
SELECT id, created_at, updated_at, first_name, last_name, email_address, email_verified, password_hash
FROM users
WHERE id = ?1
LIMIT 1
`

type UserByIDParams struct {
	ID int64
}

func (q *Queries) UserByID(ctx context.Context, arg UserByIDParams) (*User, error) {
	row := q.db.QueryRowContext(ctx, userByID, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstName,
		&i.LastName,
		&i.EmailAddress,
		&i.EmailVerified,
		&i.PasswordHash,
	)
	return &i, err
}
